IF (WIN32)
	SET(UEye_ROOT_DIR
		"$ENV{UEye_ROOT_DIR}")

	FIND_PATH(UEye_INCLUDE_DIRS NAMES uEye.h HINTS ${UEye_ROOT_DIR}/include )

	IF(CMAKE_SIZEOF_VOID_P MATCHES "8")
		FIND_LIBRARY(UEye_LIBRARY NAMES uEye_api_64 ueye_tools_64 HINTS ${UEye_ROOT_DIR} ${UEye_ROOT_DIR}/Lib)
		FIND_LIBRARY(UEye_LIBRARY_DEBUG NAMES uEye_api_64 ueye_tools_64 HINTS ${UEye_ROOT_DIR} ${UEye_ROOT_DIR}/Lib)
	ELSE()
		# Look for the library.
		FIND_LIBRARY(UEye_LIBRARY NAMES uEye_api uEye_tools HINTS ${UEye_ROOT_DIR} ${UEye_ROOT_DIR}/Lib)
		FIND_LIBRARY(UEye_LIBRARY_DEBUG NAMES uEye_api uEye_tools HINTS ${UEye_ROOT_DIR} ${UEye_ROOT_DIR}/Lib)
	ENDIF()

	MARK_AS_ADVANCED(UEye_LIBRARY)
	MARK_AS_ADVANCED(UEye_LIBRARY_DEBUG)


	SET(UEye_LIBRARIES optimized ${UEye_LIBRARY} debug ${UEye_LIBRARY_DEBUG})

	INCLUDE(FindPackageHandleStandardArgs)
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(UEye DEFAULT_MSG UEye_LIBRARIES UEye_INCLUDE_DIRS)

	MARK_AS_ADVANCED(UEye_LIBRARIES UEye_INCLUDE_DIRS)
ELSE()
    FIND_PATH(UEye_INCLUDE_DIRS
        NAMES uEye.h
        PATHS /usr/include/
    )

    FIND_FILE(UEye_LIBRARIES libueye_api.so
        PATHS /usr/lib/
    )

    IF(UEye_INCLUDE_DIRS AND UEye_LIBRARIES)
        SET (UEYE_FOUND TRUE)
    ENDIF()

    IF(UEYE_FOUND)
        MESSAGE(STATUS "Found uEye: ${UEye_INCLUDE_DIRS}, ${UEye_LIBRARIES}")
    ELSE()
        IF(UEYE_FIND_REQUIRED)
            MESSAGE(FATAL_ERROR "Could not find uEye, try to setup LIBUEYE_PATH accordingly.")
        ELSE()
            MESSAGE(STATUS "uEye not found.")
        ENDIF()
    ENDIF()
ENDIF()